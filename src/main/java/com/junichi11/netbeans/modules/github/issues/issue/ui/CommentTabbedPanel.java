/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2014 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2014 Sun Microsystems, Inc.
 */
package com.junichi11.netbeans.modules.github.issues.issue.ui;

import com.junichi11.netbeans.modules.github.issues.utils.StringUtils;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Font;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;

/**
 *
 * @author junichi11
 */
public class CommentTabbedPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = -231725010987636355L;

    /**
     * Creates new form CommentTabbedPanel
     */
    public CommentTabbedPanel() {
        initComponents();
        init();
    }

    private void init() {
        // set monospaced font
        Font commentFont = commentWriteTextArea.getFont();
        commentWriteTextArea.setFont(new Font(Font.MONOSPACED, commentFont.getStyle(), commentFont.getSize()));
    }

    public String getText() {
        return commentWriteTextArea.getText();
    }

    public void setText(String text) {
        commentWriteTextArea.setText(text);
    }

    public void appendText(String text) {
        StringBuilder sb = new StringBuilder();
        String comment = commentWriteTextArea.getText();
        sb.append(comment);
        sb.append(text);
        commentWriteTextArea.setText(sb.toString());
    }

    public void setEditable(boolean isEditable) {
        commentWriteTextArea.setEditable(isEditable);
    }

    /**
     * Show dialog.
     *
     * @param title title
     * @param text comment
     * @return String if OK Button is clicked, otherwise {@code null}
     */
    public static String showDialog(String title, String text) {
        CommentTabbedPanel panel = new CommentTabbedPanel();
        panel.setText(text);
        DialogDescriptor descriptor = new DialogDescriptor(panel, title, true, DialogDescriptor.OK_CANCEL_OPTION, null, null);
        Dialog dialog = DialogDisplayer.getDefault().createDialog(descriptor);
        dialog.pack();
        dialog.setVisible(true);
        dialog.dispose();
        if (descriptor.getValue() == DialogDescriptor.OK_OPTION) {
            return panel.getText();
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commentTabbedPane = new javax.swing.JTabbedPane();
        commentWritePanel = new javax.swing.JPanel();
        commentWriteScrollPane = new javax.swing.JScrollPane();
        commentWriteTextArea = new javax.swing.JTextArea();
        commentPreviewPanel = new javax.swing.JPanel();
        commentPreviewScrollPane = new javax.swing.JScrollPane();
        commentPreviewEditorPane = new javax.swing.JEditorPane();

        commentTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                commentTabbedPaneStateChanged(evt);
            }
        });

        commentWriteTextArea.setColumns(20);
        commentWriteTextArea.setRows(5);
        commentWriteScrollPane.setViewportView(commentWriteTextArea);

        javax.swing.GroupLayout commentWritePanelLayout = new javax.swing.GroupLayout(commentWritePanel);
        commentWritePanel.setLayout(commentWritePanelLayout);
        commentWritePanelLayout.setHorizontalGroup(
            commentWritePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentWriteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
        );
        commentWritePanelLayout.setVerticalGroup(
            commentWritePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentWriteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        commentTabbedPane.addTab(org.openide.util.NbBundle.getMessage(CommentTabbedPanel.class, "CommentTabbedPanel.commentWritePanel.TabConstraints.tabTitle"), commentWritePanel); // NOI18N

        commentPreviewEditorPane.setEditable(false);
        commentPreviewEditorPane.setContentType("text/html"); // NOI18N
        commentPreviewScrollPane.setViewportView(commentPreviewEditorPane);

        javax.swing.GroupLayout commentPreviewPanelLayout = new javax.swing.GroupLayout(commentPreviewPanel);
        commentPreviewPanel.setLayout(commentPreviewPanelLayout);
        commentPreviewPanelLayout.setHorizontalGroup(
            commentPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentPreviewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
        );
        commentPreviewPanelLayout.setVerticalGroup(
            commentPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentPreviewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        commentTabbedPane.addTab(org.openide.util.NbBundle.getMessage(CommentTabbedPanel.class, "CommentTabbedPanel.commentPreviewPanel.TabConstraints.tabTitle"), commentPreviewPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentTabbedPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void commentTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_commentTabbedPaneStateChanged
        Component selectedComponent = commentTabbedPane.getSelectedComponent();
        if (selectedComponent == commentPreviewPanel) {
            String html = StringUtils.markdownToHtml(commentWriteTextArea.getText());
            commentPreviewEditorPane.setText(html);
        }
    }//GEN-LAST:event_commentTabbedPaneStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane commentPreviewEditorPane;
    private javax.swing.JPanel commentPreviewPanel;
    private javax.swing.JScrollPane commentPreviewScrollPane;
    private javax.swing.JTabbedPane commentTabbedPane;
    private javax.swing.JPanel commentWritePanel;
    private javax.swing.JScrollPane commentWriteScrollPane;
    private javax.swing.JTextArea commentWriteTextArea;
    // End of variables declaration//GEN-END:variables
}
